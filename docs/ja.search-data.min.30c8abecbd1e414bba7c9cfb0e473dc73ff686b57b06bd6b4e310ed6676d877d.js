'use strict';(function(){const b={encode:!1,tokenize:function(a){var b=new TinySegmenter;return b.segment(a)}};b.doc={id:'id',field:['title','content'],store:['title','href','section']};const a=FlexSearch.create('balance',b);window.bookSearchIndex=a,a.add({id:0,href:'/hadv-book/docs/usage/getting-started/001-win10/',title:"1. Windows10 の準備",section:"Getting Started",content:"1. Windows10 の準備 #  ここは 001-win10（content/docs/usage/getting-started/001-win10）です。\nはじめに #  ここで紹介する設定は hadv を使用する上で必須ではありません。\n01. 260 文字パス長制限を解除 #  Windows10 で使っている NTFS ファイルシステムは最大 64KB（UTF-16 で 32767 文字）までのパス名をサポートしていますが、 Windows 95 系列との互換性のため、ほとんどのアプリケーションが 260 文字を上限にしています。\nWSL では NTFS の上限までの長さのパス名が使用できるとのことですが、 それらで使用しているファイル等をエクスプローラーで表示させることもあるかもしれないので、念のため設定する方法を紹介します。\n現在の設定を確認 #  管理者として PowerShell を開き、以下を実行します。\n1  (Get-ItemProperty \u0026#39;HKLM:\\SYSTEM\\CurrentControlSet\\Control\\FileSystem\u0026#39; -Name \u0026#39;LongPathsEnabled\u0026#39;).LongPathsEnabled   結果が 1 ならば設定済みです。ここで終了します。\n未設定の場合、設定する #  確認結果が 0 だった場合は未設定です。\n管理者として開いた PowerShell で、以下を実行します。\n1  Set-ItemProperty \u0026#39;HKLM:\\SYSTEM\\CurrentControlSet\\Control\\FileSystem\u0026#39; -Name \u0026#39;LongPathsEnabled\u0026#39; -Value 1   "}),a.add({id:1,href:'/hadv-book/docs/usage/getting-started/',title:"Getting Started",section:"Usage",content:"Getting Started（hadv-book の開始方法） #  ここは Getting Started（content/docs/usage/getting-started/_index.md）です。\nコンテンツ一覧 #   1. Windows10 の準備   Windows10 設定の参考情報   2. WSL2 の準備   WSL2 のインストールや設定の参考情報   3. VSCode と Git の準備   VSCode と Git のインストールや設定の参考情報   "}),a.add({id:2,href:'/hadv-book/docs/usage/',title:"Usage",section:"Docs",content:"Usage #  ここは Usage（content/docs/usage/_index.md）です。\nコンテンツ一覧 #   Getting Started   hadv-book の開始方法   Templates   テンプレート集   "}),a.add({id:3,href:'/hadv-book/docs/usage/templates/minutes/',title:"議事録",section:"Templates",content:"議事録 #  ここは 議事録（content/docs/info/templates/minutes/_index.md）です。\nコンテンツ一覧 #   議事録テンプレート.md   議事録作成に使えるテンプレートのサンプル   "}),a.add({id:4,href:'/hadv-book/docs/usage/getting-started/002-wsl2/',title:"2. WSL2 の準備",section:"Getting Started",content:"2. WSL2 の準備 #  ここは 002-wsl2（content/docs/usage/getting-started/002-wsl2）です。\nはじめに #  公式ドキュメント（https://docs.microsoft.com/ja-jp/windows/wsl/install-win10）を使って設定することを強く推奨します。\nしかしながら、公式ドキュメントでは Microsoft Store を開く手順が示されており、 制限がかけられた環境（配布された PC で機能が削られている等）では手順通りに設定することができないケースもあります。 そのため、ここでは Microsoft Store を使わない手順を参考まで紹介します。\n最新の Windows Insider の Windows 10 プレビュー ビルドが使用可能ならば１コマンドで全て完結します。\n公式ドキュメントを参照してください。  01. WSL2 実行のための要件を確認 #  公式ドキュメントにある要件は、\n x64 システムの場合:バージョン 1903 以降、ビルド 18362 以上。\n（マイナービルドは 1049 より大きい必要あり） ARM64 システムの場合:バージョン 2004 以降、ビルド 19041 以上。 18362 より前のビルドは WSL 2 をサポートしていません。  バージョンの確認は、\n管理者として PowerShell を開き、以下を実行します。\n1  (Get-ItemProperty -Path \u0026#34;HKLM:\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\u0026#34; -Name ReleaseId).ReleaseID   ビルドの確認は、\n管理者として開いた PowerShell で、以下を実行します。\n1  (Get-ItemProperty -Path \u0026#34;HKLM:\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\u0026#34; -Name CurrentBuild).CurrentBuild   マイナービルドの確認は、\n管理者として開いた PowerShell で、以下を実行します。\n1  (Get-ItemProperty -Path \u0026#34;HKLM:\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\u0026#34; -Name UBR).UBR   WSL2 実行のための要件に満たなかった場合は、Windows の更新を試みます。\n02. WSL 機能の有効化 #  管理者として PowerShell を開き、以下を実行します。\n1  dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart   03. 仮想マシンプラットフォーム有効化 #  管理者として PowerShell を開き、以下を実行します。\n1  dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart   コンピューターに仮想化機構がない場合など、エラーが発生する場合があります。\n公式ドキュメント「手順 3:」に対応方法が書かれていますので、従います。  04. 再起動 #  PC を再起動します。\n05. Linux カーネル更新 #  x64 マシン用 WSL2 Linux カーネル更新プログラム パッケージ （https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi） をダウンロードして実行します。\n（問題があった場合は、公式ドキュメントを参照します）\n06. WSL 2 を既定バージョンに設定 #  管理者として PowerShell を開き、以下を実行します。\n1  wsl --set-default-version 2   07. Ubuntu-20.04 をダウンロード #  管理者として PowerShell を開き、以下を実行します。\n1 2  Set-Location -Path $env:USERPROFILE curl.exe -s -L -o \u0026#34;Ubuntu_2004.2020.424.0_x64.appx\u0026#34; \u0026#34;https://aka.ms/wslubuntu2004\u0026#34;   カレントユーザーのホームディレクトリに Ubuntu-20.04 のディストリビューション・パッケージがダウンロードされます。 Linux 用 Windows サブシステム ディストリビューション・パッケージを手動でダウンロードする方法については、 https://docs.microsoft.com/ja-jp/windows/wsl/install-manual に詳しい情報があります。  08. Ubuntu-20.04 をインストール #  管理者として PowerShell を開き、以下を実行します。\n1 2  Set-Location -Path $env:USERPROFILE Add-AppxPackage .\\Ubuntu_2004.2020.424.0_x64.appx   09. ユーザー名とパスワードを設定 #  Windows のスタートメニューから Ubuntu 20.04 LTS を実行すると、最初にアカウント作成が求められます。\n作成するアカウントについて、ドキュメント には次のような説明があります。\n この ユーザー名 および パスワード は、インストールする Linux ディストリビューションごとに固有であり、Windows ユーザー名とは関係ありません。 ユーザーが ユーザー名 および パスワード を作成すると、そのアカウントがディストリビューションの既定のユーザーとなり、起動時に自動的にサインインされます。 このアカウントは、Linux 管理者と見なされ、sudo (Super User Do) 管理コマンドを実行できます。 Windows Subsystem for Linux で実行されている各 Linux ディストリビューションには、独自の Linux ユーザー アカウントとパスワードがあります。 ディストリビューションの追加、再インストール、再設定を行うたびに、Linux ユーザー アカウントを構成する必要があります。  ユーザーアカウント作成については、\nhttps://docs.microsoft.com/ja-jp/windows/wsl/user-support に詳しい情報があります。  10. パッケージ更新とアップグレード #  Ubuntu-20.04 コンソール画面にて、以下を実行します。\n1  sudo apt update \u0026amp;\u0026amp; sudo apt upgrade   "}),a.add({id:5,href:'/hadv-book/docs/example/',title:"Example",section:"Docs",content:"Example #  ここは Example（content/docs/example/_index.md）です。\nコンテンツ一覧 #   AsciiDoc   AsciiDoc の実例ページ集   Markdown   Markdown の実例ページ集   "}),a.add({id:6,href:'/hadv-book/docs/usage/getting-started/003-vscode+git/',title:"3. VSCode と Git の準備",section:"Getting Started",content:"3. VSCode と Git の準備 #  ここは 003-vscode+git（content/docs/usage/getting-started/003-vscode+git）です。\nはじめに #  VSCode はインストーラーを使うか、Zip アーカイブを解凍して実行する２つのインストール方法がありますが、どちらでも構いません。 Git は WSL2 の Ubuntu 20.04 でインストールできますので、今回はその方法を紹介します。\n01. VSCode のインストール #  インストーラーを使ったインストール方法を紹介します。\n 使用中の環境に応じた VSCode インストーラーを https://code.visualstudio.com/download からダウンロードします。 ダウンロードしたら、インストーラー（VSCodeUserSetup- {version} .exe）を実行します。これには1分しかかかりません。  VSCode セットアップに関する詳しい情報は、\nhttps://code.visualstudio.com/docs/setup/windows にあります。  02. Git のインストール #  WSL2 の Ubuntu 20.04 コンソール画面を開き、以下を実行します。\n1  sudo apt-get install git   WSL2 への Git インストールに関する詳しい情報は、\nhttps://docs.microsoft.com/ja-jp/windows/wsl/tutorials/wsl-git にあります。  "}),a.add({id:7,href:'/hadv-book/docs/usage/templates/',title:"Templates",section:"Usage",content:"Templates #  ここは Templates（content/docs/info/templates/_index.md）です。\nコンテンツ一覧 #   議事録   議事録テンプレート   "}),a.add({id:8,href:'/hadv-book/docs/example/asciidoc/',title:"AsciiDoc",section:"Example",content:"AsciiDoc 執筆環境構築 はじめに この文書では、Windows10 環境において、Asciidoctor の 公式Dockerイメージを中心に、 VSCodeの拡張機能 「AsciiDoc」と 「Remote - Containers」を用いた AsciiDoc 執筆環境の構築方法などを紹介します。\n     このドキュメントは Asciidoc で書かれています。背景を白くした方が見やすいです。     [参考] その他のドキュメント執筆環境について これまで使用してきた様々な形式のドキュメントについて経験したことの一端を書き残しますが、興味がなければスルーしてください。\n  MS Excel/Word を使った経験から…（クリックで開きます）   個人としての使用感について\n   機能が豊富で、やりたいことに困らない。\n   書き込む情報量が多くなるとアプリケーションが重くなる。\n     チームとしての使用感について\n   複数人で同じファイルを使用する場合、ロックしたまま放置されることがある。\n     トラブルについて\n   簡単に削除できてしまい、削除されたデータは簡単には戻らない。\n     品質について\n   多くの校正を経て作られた一点ものの資料は美しい。\n   編集者の Excel/Word スキルがそのまま反映され、品質がバラバラになる。\n   資料の変更箇所のハイライトが残されたまま放置される。\n   Excel のセル内に書かれた文字列は、見たままに印刷されない。\n     互換ソフトの存在について\n   購入コストが削減できる。\n   作業コストが上がる。\n   完全互換でないため、マクロや VBA が使えなくなる。また、作れなくなる。\n   Excel/Word と互換ソフトが混在する場合、非互換部分が悪影響を及ぼして、保存するたびに壊れていく（スタイルなど）。\n   外部から入手したマクロ/VBA ツールなどを正常に動かすために、MS Excel/Word がインストールされている環境にファイルを移動して作業することになり、余計な時間がかかる。\n     履歴管理について\n   ドキュメント内に「更新履歴ページ」を作り履歴管理をすると、それ自体の更新を忘れることがある。\n   「更新履歴ページ」に書かれていることがすべてであり、それ以上の履歴を追うことができない。\n   ファイルの移動/コピーが簡単であるためか、他部署により有用な資料が持ち出され、様々な派生バージョン（外部向け資料など）が出来上がる（最初に書いた人が誰なのかも分からなくなる）。\n   ファイルをリネームして過去世代のデータを残すも、リネームの命名規則が守られない。\n          Wiki System を使った経験から…（クリックで開きます）   個人としての使用感について\n   Web の TextArea に入力するため、通常のテキストエディタの機能にも劣る。\n   書きながらプレビューできないため、Wiki 書式を身につけなければ使いづらいところにハードルがあり、利用者が限られていく。\n   書きながらプレビューできないため、途中で壊れたことに気付きづらい。\n   他形式（pdf など）への変換ができず、Web サーバに接続可能な環境でなければ使うことができない。\n   使える書式が少なすぎる。\n     チームとしての使用感について\n   ドキュメントが１箇所にまとまる（別の形式を併用しない限り）。\n   複数人で作業していてもロックはされないが、衝突した場合、Web ページ上でマージしなければならない。\n   メンバーが積極的に利用し続けないと、あっという間に情報は古くなり、廃れる。\n     品質について\n   一定レベルは保てる。\n   限られた Wiki 書式で見やすく使いやすい文章を作るにはセンスが求められる。\n     運用について\n   書き溜めた Wiki 書式データを他の環境に移行することは難しいため、新しいシステムに移行し辛い。\n   専用のデータバックアップの仕組みを作る必要がある。\n   障害により wiki システムが壊れた時のリストア作業が大変。\n         Markdown を使った経験から…（クリックで開きます）   個人としての使用感について\n   テキストベースであるためデータを Git 等で管理しやすい。\n   標準仕様というものがないため方言が多く、ツールとマッチしないケースが出てくる（機能に不足感→独自に拡張→方言出現）。\n     チームとしての使用感について\n   経験なし\n     環境構築について\n   VSCode + 各種プラグイン/ツール類（graphviz, pandoc, plantuml）などで構築した場合、環境構築の手順が多すぎて作業グループ全体で揃えるのが大変。\n           1. システム概要 1.1. システム構成イメージ システム構成イメージを簡易的な配置図にて紹介します。\n  図 1. システム構成イメージ   1.2. システム使用イメージ 構築したシステムを使用するイメージです。\n  Docker Container を起動するときに、Document Folder をマウント（①）しておく。\n  VSCode の Remote-Containers プラグインで起動中のコンテナに接続（②）すると VSCode Agent が作られ、ここに VSCode 拡張機能をインストールする（Asciidoctor 拡張機能など）\n  VSCode で AsciiDoc ファイルを編集（③）する（Asciidoctor 拡張機能のプレビュー機能を使用）\n  完成した AsciiDoc File を HTML5 や PDF に変換し保存（④）する。\n  Asciidoc File は Git 等のバージョン管理システムにて管理（⑤）する。\n      2. システム構築手順 2.1. Docker 環境構築 ここですべきことは、\n   WSL2 を使用可能にする\n  Docker Desktop For Windows のインストール（バックエンド：WSL2）する\n   ことです。 この時点でコマンドプロンプトから docker コマンドが実行できれば問題ないです。\n  参考 URL  https://docs.microsoft.com/ja-jp/windows/wsl/install-win10 https://docs.docker.jp/docker-for-windows/install.html\n    2.2. コンテナ起動 Windows 10 上の Document Folder を\n 1 C:\\Users\\Name\\MyDocs    とした場合、コンテナは次のコマンドで起動します。\n 1 2 3 docker run --name docker-asciidoctor-vscode \\ (1) --volume=\u0026#39;C:\\Users\\Name\\MyDocs:/documents\u0026#39; \\ (2) -it -d asciidoctor/docker-asciidoctor /bin/bash (3)      1 docker-asciidoctor-vscode としていますが、任意の名前をつけてかまいません。   2 Windows 10 上の Document Folder を 公式 Asciidoctor イメージ推奨の /documents にマウントします。   3 バックグラウンドで asciidoctor/docker-asciidoctor イメージの /bin/bash を起動します。    同様の内容で Docker Desktop の GUI を使って起動することも可能です。\n   2.3. VSCode および拡張機能のインストール ここですべきことは、\n   最新版の VSCode をインストールする\n  拡張機能「Remote-Containers」（ms-vscode-remote.remote-containers）を導入する\n  拡張機能「AsciiDoc」（asciidoctor.asciidoctor-vscode）を導入する\n   ことです。\n  参考 URL  https://code.visualstudio.com/docs/setup/windows https://code.visualstudio.com/docs/editor/extension-gallery\n    2.4. VSCode の設定 VSCode に次の設定を追加します。\n 表 1. 設定項目     設定項目 設定値 備考     asciidoc.asciidoctor_command\n asciidoctor -r asciidoctor-diagram\n 必須\n   asciidoc.asciidoctorpdf_command\n asciidoctor-pdf -r asciidoctor-diagram -r /documents/asciidoc/resources/.pdf/theme-business-001/prawn-svg-config.rb\n 必須 コンテナ上のパスを指定する prawn-svg-config.rb については表外で説明する\n   asciidoc.use_asciidoctor_js\n false\n 必須\n   asciidoc.use_asciidoctorpdf\n true\n 必須\n   asciidoc.preview.useEditorStyle\n false\n *.adoc 内でスタイルの指定をするので、無効でよい\n    svg 画像に日本語を含める場合の対応 ここでは「prawn-svg-config.rb」という名前を使っていますが、中身が同じであれば名前は別でも大丈夫です。 asciidoctor-pdf で svg 形式画像を出力する際、svg 形式画像に日本語が含まれると「￢」と表示されてしまう問題の対策として、次のコードを読み込ませる必要があります。\n 1 2 3 Prawn::Svg::Font::GENERIC_CSS_FONT_MAPPING.merge!( \u0026#39;sans-serif\u0026#39; =\u0026gt; \u0026#39;KaiGen Gothic JP\u0026#39; )    指定可能なフォントは、使用しているテーマで定義済みのものに限られます。\n    参考 URL  https://code.visualstudio.com/docs/getstarted/settings https://github.com/asciidoctor/asciidoctor-pdf/issues/82#issuecomment-134949038\n      3. 使用方法 3.1. VSCode で起動中のコンテナに接続 Ctrl+Shift+P もしくは F1 で『Remote-Containers: Attach to Running Container…​』を実行し、ポップアップ表示された「docker-asciidoctor-vscode」コンテナを選択すると、接続が開始されます。\n  3.2. コンテナ内に VSCode 拡張機能をインストール Ctrl+Shift+X で拡張機能一覧を開き、CONTAINER リストの  アイコン（ローカル拡張機能をリモートにインストール）をクリックして、インストールする拡張機能を選択し、インストールを実施します。\n  3.3. Document Folder 内の *.adoc ファイルを開く Ctrl+K Ctrl+O もしくは 「ファイル  フォルダを開く」で /documents フォルダを開き、Ctrl+Shift+E で表示されるエクスプローラーで /documents ディレクトリ以下のファイルを開きます。\n  3.4. *.adoc ファイルの編集とプレビュー asciidoctor 書式でファイルに内容を記述します。 Ctrl+K V でサイドにプレビューを開きます。 テキストを編集すると、プレビュー画面も更新されます。\n  参考 URL  https://docs.asciidoctor.org/asciidoc/latest/ https://takumon.github.io/asciidoc-syntax-quick-reference-japanese-translation/\n    3.5. html/pdf ファイルの出力 Ctrl+Shift+P もしくは F1 で『AsciiDoc: Save HTML document』を実行すると、*.adoc と同じディレクトリに html ファイルが保存されます。 また、 Ctrl+Shift+P もしくは F1 で『AsciiDoc: Export document as PDF』を実行すると、指定した出力先に PDF ファイルが保存されます。\n    "}),a.add({id:9,href:'/hadv-book/docs/example/markdown/',title:"Markdown",section:"Example",content:"Markdown #  Markdown Syntax #  ここで Hugo の Markdown で記述できる基本的な構文のサンプルを掲載します。\nHeadings #  次の HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; 要素は、６レベルのセクション見出しを表示します。\u0026lt;h1\u0026gt; は一番高いレベルのセクションで \u0026lt;h6\u0026gt; は一番低いレベルのセクションです。\nH1 #  H2 #  H3 #  H4 #  H5 #  H6 #  Paragraph #  寿限無、寿限無、五劫の擦り切れ、海砂利水魚の、水行末・雲来末・風来末、喰う寝る処に住む処、藪ら柑子の藪柑子、パイポ・パイポ・パイポのシューリンガン、 シューリンガンのグーリンダイ、グーリンダイのポンポコピーのポンポコナの、長久命の長助\n色は匂へど　散りぬるを\n我が世誰そ　常ならむ\n有為の奥山　今日越えて\n浅き夢見じ　酔ひもせず\nBlockquotes #  blockquote 要素は、別のソースから引用されたコンテンツの表示に使います。 必要に応じて、footer や cite 要素内にあるべき引用や、注釈や略語などのインライン変更を含む場合もあります。\n帰属なしの Blockquote #   あめつちほしそら、やまかはみねたに 注意 blockquote 内でも Markdown syntax が使えます。\n 帰属ありの Blockquote #   くもきりむろこけ、ひといぬうへすゑ — 作者不明1\n Tables #  Tables は コア Markdown 仕様の一部ではありませんが、Hugo はすぐに使えるようサポートしています。\n   Name Age     Bob 27   Alice 23    tables 内の in-line Markdown Syntax #     Italics Bold Code     italics bold code    Code Blocks #  Code block with backticks #  \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block indented with four spaces #  \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  Code block with Hugo\u0026rsquo;s internal highlight shortcode #  \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; List Types #  Ordered List #   First item Second item Third item  Unordered List #   List item Another item And another item  Nested list #   Fruit  Apple Orange Banana   Dairy  Milk Cheese      上記の引用は、日本のいろは歌の別バージョンを抜粋したものです。 \u0026#x21a9;\u0026#xfe0e;\n   "}),a.add({id:10,href:'/hadv-book/posts/2021/04/20210409/',title:"サンプル日誌",section:"Blog",content:"本日の予定 #   09:00 出社 09:15 朝会 10:00 ○○打ち合わせ 15:00 △△レビュー  本日の業務 #  09:15 朝会 #   □□について確認  先日報告した□□が昨日公開されたため、◎◎サーバー上で試しなさいとの指示   △△のレビュー担当は、▼▼さん。  "}),a.add({id:11,href:'/hadv-book/docs/usage/templates/minutes/tplt001-md/',title:"議事録テンプレート.md",section:"議事録",content:"第２回 新システム要件確認会議 #  会議情報 #     項目 内容     日時 2021年4月9日 16:00   場所 A社本社ビル 5F 第１会議室   議長 A社：山下（部長）   参加者 A社：川上（課長）、中谷（係長）\nB社：佐藤、鈴木、高橋   欠席者    傍聴者 A社：東原（部長）、西野（係長）   記録者 田中   目的 A社 新システム要件の確定   資料１ A社システム機能配備一覧   資料２ 予約申し込みデータレイアウト（案）    議題 #   予約申し込みデータレイアウトについて 予約確定メール送信機能について 第３回 新システム要件確認会議の開催について  議論（ポイント）と結論 #  申し込みデータレイアウトについて #   予約申し込み時に入力されるデータレイアウトに追加項目として◎◎が必要（中谷）  ◎◎を追加した場合、▼▼も同時に検討しなければ整合性が保てない（佐藤） ▼▼も含めた新しいデータレイアウトを作成してほしい（中谷） 2021/04/30 までに用意する（佐藤）  ⇒ 決定事項０１     既存の項目△△が現在使用されておらず、不要であれば削除をしたい（鈴木）  削除を許可する（川上） 他のデータレイアウトにおいても使用していない項目がないか調査してほしい（中谷） 2021/04/30 に調査結果を報告する（佐藤）  ⇒ 決定事項０２      予約確定メール送信機能について #   あいうえおかきくけこさしすせそ（川上）  たちつてと（鈴木） なにぬねのはひふへほ（中谷） まみむめもやゆよわをん（佐藤） ＡＢＣＤＥＦＧＨＩＪＫＬＭＮＯＰＱＲＳＴＵ（鈴木）  ⇒ 決定事項０３      未解決事項・アクションプラン #   ほげほげ  今後のスケジュール #   次回開催予定：◎月◆日  "}),a.add({id:12,href:'/hadv-book/docs/example/markdown/shortcodes/buttons/',title:"Buttons",section:"Shortcodes",content:"Buttons #  button は、ローカル ページまたは外部リンクにつながるリンクのスタイルです。\nExample #  {{\u0026lt; button relref=\u0026#34;/\u0026#34; [class=\u0026#34;...\u0026#34;] \u0026gt;}}Get Home{{\u0026lt; /button \u0026gt;}} {{\u0026lt; button href=\u0026#34;https://github.com/alex-shpak/hugo-book\u0026#34; \u0026gt;}}Contribute{{\u0026lt; /button \u0026gt;}}  Get Home  Contribute  "}),a.add({id:13,href:'/hadv-book/docs/example/markdown/shortcodes/columns/',title:"Columns",section:"Shortcodes",content:"Columns #  columns を使うと、読みやすくするために、短いコンテンツを水平方向に整理できます。\n{{\u0026lt; columns \u0026gt;}} \u0026lt;!-- begin columns block --\u0026gt; # Left Content Lorem markdownum insigne... \u0026lt;---\u0026gt; \u0026lt;!-- magic separator, between columns --\u0026gt; # Mid Content Lorem markdownum insigne... \u0026lt;---\u0026gt; \u0026lt;!-- magic separator, between columns --\u0026gt; # Right Content Lorem markdownum insigne... {{\u0026lt; /columns \u0026gt;}} Example #  Left Content 文壇の、或ある老大家が亡なくなって、その告別式の終り頃から、雨が降りはじめた。早春の雨である。\nその帰り、二人の男が相合傘あいあいがさで歩いている。いずれも、その逝去せいきょした老大家には、お義理一ぺん、話題は、女に就ついての、極きわめて不きんしんな事。 紋服の初老の大男は、文士。それよりずっと若いロイド眼鏡めがね、縞しまズボンの好男子は、編集者。  Mid Content 私は、その男の写真を三葉、見たことがある。\n一葉は、その男の、幼年時代、とでも言うべきであろうか、十歳前後かと推定される頃の写真であって、その子供が大勢の女のひとに取りかこまれ、 （それは、その子供の姉たち、妹たち、それから、従姉妹いとこたちかと想像される）庭園の池のほとりに、荒い縞の袴はかまをはいて立ち、首を三十度ほど左に傾け、醜く笑っている写真である。  Right Content 朝、食堂でスウプを一さじ、すっと吸ってお母さまが、\n「あ」\nと幽かすかな叫び声をお挙げになった。\n「髪の毛？」\nスウプに何か、イヤなものでも入っていたのかしら、と思った。\nお母さまは、何事も無かったように、またひらりと一さじ、スウプをお口に流し込み、すましてお顔を横に向け、お勝手の窓の…   "}),a.add({id:14,href:'/hadv-book/docs/example/markdown/shortcodes/details/',title:"Details",section:"Shortcodes",content:"Details #  details ショートコードは details html5 要素ヘルパーです。\nこれは expand ショートコード（廃止予定）を置き換えるものです。\nExample #  {{\u0026lt; details \u0026#34;Title\u0026#34; [open] \u0026gt;}} ## Markdown content Lorem markdownum insigne... {{\u0026lt; /details \u0026gt;}} {{\u0026lt; details title=\u0026#34;Title\u0026#34; open=true \u0026gt;}} ## Markdown content Lorem markdownum insigne... {{\u0026lt; /details \u0026gt;}} Title Markdown content Lorem markdownum insigne\u0026hellip;   "}),a.add({id:15,href:'/hadv-book/docs/example/markdown/shortcodes/hints/',title:"Hints",section:"Shortcodes",content:"Hints #  hint ショートコードは ヒント・警告・通知 などのブロックとして使用できます。\n３色から選択：info, warning, danger.\n{{\u0026lt; hint [info|warning|danger] \u0026gt;}} **Markdown content** Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa {{\u0026lt; /hint \u0026gt;}} Example #  Markdown content\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa  Markdown content\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa  Markdown content\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa  "}),a.add({id:16,href:'/hadv-book/docs/example/markdown/shortcodes/katex/',title:"KaTeX",section:"Shortcodes",content:"KaTeX #  KaTeX shortcode let you render math typesetting in markdown document. See KaTeX\nExample #  {{\u0026lt; katex [display] [class=\u0026#34;text-center\u0026#34;] \u0026gt;}} f(x) = \\int_{-\\infty}^\\infty\\hat f(\\xi)\\,e^{2 \\pi i \\xi x}\\,d\\xi {{\u0026lt; /katex \u0026gt;}}     \\[f(x) = \\int_{-\\infty}^\\infty\\hat f(\\xi)\\,e^{2 \\pi i \\xi x}\\,d\\xi\\]    Display Mode Example #  Here is some inline example:  \\(\\pi(x)\\)  , rendered in the same line. And below is display example, having display: block  \\[f(x) = \\int_{-\\infty}^\\infty\\hat f(\\xi)\\,e^{2 \\pi i \\xi x}\\,d\\xi\\]  Text continues here.\n"}),a.add({id:17,href:'/hadv-book/docs/example/markdown/shortcodes/mermaid/',title:"Mermaid",section:"Shortcodes",content:'Mermaid Chart #  Mermaid is library for generating svg charts and diagrams from text.\nExample #  {{\u0026lt; mermaid [class=\u0026#34;text-center\u0026#34;]\u0026gt;}} sequenceDiagram Alice-\u0026gt;\u0026gt;Bob: Hello Bob, how are you? alt is sick Bob-\u0026gt;\u0026gt;Alice: Not so good :( else is well Bob-\u0026gt;\u0026gt;Alice: Feeling fresh like a daisy end opt Extra response Bob-\u0026gt;\u0026gt;Alice: Thanks for asking end {{\u0026lt; /mermaid \u0026gt;}}    mermaid.initialize({ "flowchart": { "useMaxWidth":true }, "theme": "default" } ) sequenceDiagram Alice-Bob: Hello Bob, how are you? alt is sick Bob-Alice: Not so good :( else is well Bob-Alice: Feeling fresh like a daisy end opt Extra response Bob-Alice: Thanks for asking end   '}),a.add({id:18,href:'/hadv-book/docs/example/markdown/shortcodes/section/page1/',title:"Page 1",section:"Section",content:"Page 1 #  "}),a.add({id:19,href:'/hadv-book/docs/example/markdown/shortcodes/section/page2/',title:"Page 2",section:"Section",content:"Page 2 #  "}),a.add({id:20,href:'/hadv-book/docs/example/markdown/shortcodes/section/',title:"Section",section:"Shortcodes",content:"Section #  Section は、title と description を使用して、セクション内のページを定義リストとしてレンダリングします。\nExample #  {{\u0026lt; section \u0026gt;}}  Page 1   Page 1 の description を表示   Page 2   Page 2 の description を表示   "}),a.add({id:21,href:'/hadv-book/docs/example/markdown/shortcodes/tabs/',title:"Tabs",section:"Shortcodes",content:"Tabs #  tabs を使用すると、サポートされている各プラットフォームのインストール手順など、 コンテキストごとにコンテンツを整理できます。\n{{\u0026lt; tabs \u0026#34;uniqueid\u0026#34; \u0026gt;}} {{\u0026lt; tab \u0026#34;MacOS\u0026#34; \u0026gt;}} # MacOS Content {{\u0026lt; /tab \u0026gt;}} {{\u0026lt; tab \u0026#34;Linux\u0026#34; \u0026gt;}} # Linux Content {{\u0026lt; /tab \u0026gt;}} {{\u0026lt; tab \u0026#34;Windows\u0026#34; \u0026gt;}} # Windows Content {{\u0026lt; /tab \u0026gt;}} {{\u0026lt; /tabs \u0026gt;}} Example #  MacOS MacOS This is tab MacOS content.\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\nLinux Linux This is tab Linux content.\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\nWindows Windows This is tab Windows content.\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\n "})})()